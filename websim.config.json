{
  "database": {
    "schema": {
      "order_item_v3": {
        "id": { "type": "text", "description": "Primary key: firebase_auth_uid:client_key:product" },
        "firebase_auth_uid": { "type": "text", "description": "Firebase auth uid of the user who owns the record" },
        "client_key": { "type": "text", "description": "Lowercased client name for grouping" },
        "client_name": { "type": "text", "description": "Display client name" },
        "product": { "type": "text", "description": "Product name" },
        "quantity": { "type": "integer", "description": "Quantity ordered for this product" },
        "created_at": { "type": "timestamptz", "description": "Timestamp of when the order item was created (auto-generated by WebsimSocket)" }
      },
      "order_payment_v3": {
        "id": { "type": "text", "description": "Primary key: firebase_auth_uid:client_key" },
        "firebase_auth_uid": { "type": "text", "description": "Firebase auth uid of the user who owns the record" },
        "client_key": { "type": "text", "description": "Lowercased client name for grouping" },
        "client_name": { "type": "text", "description": "Display client name" },
        "paid": { "type": "numeric", "description": "Total amount paid by this client" },
        "created_at": { "type": "timestamptz", "description": "Timestamp of when the payment record was created (auto-generated by WebsimSocket)" }
      }
    },
    "instructions": "Orders are stored per Firebase account. Use the Firebase auth uid as firebase_auth_uid. Aggregate order_item_v3 by client_key to build each order, and read/update payment totals from order_payment_v3. Use deterministic ids to upsert: item id = `${firebase_auth_uid}:${client_key}:${product}`, payment id = `${firebase_auth_uid}:${client_key}`."
  }
}

